import { compile } from 'svelte/compiler';
import * as fs from "fs"
import * as path from "path"

// cleaning up

fs.readdirSync('./public/').forEach(file => {
  const fileDir = path.join('./public/', file);

  if (file !== 'data.json' && file !== '_layout.html') {
    fs.unlinkSync(fileDir);
  }
});

fs.readdirSync('./precompiled/').forEach(file => {
  const fileDir = path.join('./precompiled/', file);
  console.log(fileDir);

  if (file !== 'lib') {
    fs.unlinkSync(fileDir);
  }
});

var all_css = `/* Css generated by Svelte */
`

async function compileComponents(filename){

  let name = filename.replace('.svelte','');

  const source = fs.readFileSync(`./src/lib/${filename}`, 'utf8');


  // Compile the component to JavaScript code
  const { js, css } = compile(source, {generate: 'ssr'});

  // Write the compiled code to a temporary JS file
  const tmpFile = `./precompiled/lib/${name}.js`
  fs.writeFileSync(tmpFile, js.code);

  if(css.code){
    all_css += css.code;
  }
  

}

async function compilePages(){

  const source = fs.readFileSync(`./src/index.svelte`, 'utf8');
  const layout = fs.readFileSync(`./src/layout.html`, 'utf8');

  var { js, css } = compile(source, {generate: 'ssr'});
  js.code = js.code.replaceAll('.svelte', '.js')

  if(css.code){
  all_css += css.code;
  }

  const tmpFile = `./precompiled/index.js`
  fs.writeFileSync(tmpFile, js.code);

  const { default: Component } = await import('./precompiled/index.js');


  var data = fs.readFileSync(`./public/data.json`, 'utf8');
  data = JSON.parse(data);

  data.pages.forEach((page)=>{

    let slug = page.slug;

    data.page = page;
  
    const body = Component.render({ data: data });
  
    const html = layout.replace('{body}', body.html);

    fs.writeFileSync(`./public/${slug}.html`, html);

  })

}

const comps = fs.readdirSync('./src/lib');
comps.forEach((comp)=>{
  compileComponents(comp);
})

compilePages();

fs.writeFileSync(`./public/style.min.css`, all_css);


// this is only needed for Edge functions
const edge_layout = fs.readFileSync(`./src/layout.html`, 'utf8');
fs.writeFileSync(`./public/_layout.html`, edge_layout);
